package com.syzn.etc.tools.ftp;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * @author: create by Maria
 * @date:2020/3/9 8:32
 * @description: md5校验文件的完整性
 */
@Component
public class MD5Util {
	/**
	 * 默认的密码字符串组合，用来将字节转换成16进制表示的字符
	 */
	protected static char hexDigits[] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

	protected static MessageDigest messagedigest = null;
	static {
		try {
			 messagedigest = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException nsaex) {
			System.err.println(MD5Util.class.getName()
					+ "初始化失败，MessageDigest不支持MD5Util。");
			nsaex.printStackTrace();
		}
	}

	/**
	 * 生成字符串的md5校验值
	 * @param str
	 * @return
	 */
	public static String getMD5String(String str){
		return  getMD5String(str.getBytes());
	}

	public static String getMD5String(byte[] bytes) {
		messagedigest.update(bytes);
		return bufferToHex(messagedigest.digest());
	}

	private static String bufferToHex(byte bytes[], int m, int n) {
		StringBuffer stringbuffer = new StringBuffer(2 * n);
		int k = m + n;
		for (int l = m; l < k; l++) {
			appendHexPair(bytes[l], stringbuffer);
		}
		return stringbuffer.toString();
	}

	private static void appendHexPair(byte bt, StringBuffer stringbuffer) {
		// 取字节中高 4 位的数字转换, >>> 为逻辑右移，将符号位一起右移,此处未发现两种符号有何不同
		char c0 = hexDigits[(bt & 0xf0) >> 4];
		// 取字节中低 4 位的数字转换
		char c1 = hexDigits[bt & 0xf];
		stringbuffer.append(c0);
		stringbuffer.append(c1);
	}

	private static String bufferToHex(byte bytes[]) {
		return bufferToHex(bytes, 0, bytes.length);
	}


	/**
	 * 判断字符串的md5校验码是否与一个已知的md5码相匹配
	 * @param md5 要校验的字符串
	 * @param md5Pwd 已知的md5校验码
	 * @return
	 */
	public static boolean checkPwd(String md5,String md5Pwd){
		return md5.equals(md5Pwd);
	}

	/**
     * 根据MultipartFile文件生成md5校验值
     * @param file
     * @return
     * @throws IOException
     */
	public static String getFileMD5Str(MultipartFile file) throws IOException{
		InputStream inputStream = file.getInputStream();
		byte[] buffer = new byte[1024];
		int numRead = 0;
		while ((numRead = inputStream.read(buffer)) > 0){
			messagedigest.update(buffer, 0, numRead);
		}
		inputStream.close();
		return bufferToHex(messagedigest.digest());
	}

    /**
     * 根据File文件生成md5校验值
     * @param file
     * @return
     * @throws IOException
     */
	public static String getFileMD5String(File file) throws IOException{
		InputStream inputStream = new FileInputStream(file);
		byte[] buffer = new byte[1024];
		int numRead = 0;
		while ((numRead = inputStream.read(buffer)) > 0){
			messagedigest.update(buffer, 0, numRead);
		}
		inputStream.close();
		return bufferToHex(messagedigest.digest());
	}
}
